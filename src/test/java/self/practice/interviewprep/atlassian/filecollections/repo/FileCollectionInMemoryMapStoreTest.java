package self.practice.interviewprep.atlassian.filecollections.repo;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import self.practice.interviewprep.atlassian.filecollections.model.File;
import self.practice.interviewprep.atlassian.filecollections.model.FileCollection;
import self.practice.interviewprep.atlassian.filecollections.model.Status;

// Generated by CodiumAI
@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class FileCollectionInMemoryMapStoreTest {

  // Creating a new file collection and adding it to the in-memory map store.
  @Test
  public void test_createFileCollectionAndAddFileToCollection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Add a file to the collection
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");

    // Assert that the file collection and file are added successfully
    assertEquals(collection, store.getFileCollection("COL001"));
    assertEquals(file, store.getFile("FILE001"));
    assertEquals(1, store.getNumberOfFilesInCollection("COL001"));
  }

  // Adding a file to a file collection in the in-memory map store.
  @Test
  public void test_addFileToCollection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Add a file to the collection
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");

    // Assert that the file is added to the collection
    assertEquals(1, store.getNumberOfFilesInCollection("COL001"));
  }

  // Updating the status of a file collection in the in-memory map store.
  @Test
  public void test_updateFileCollectionStatus() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Update the status of the file collection
    store.updateFileCollectionStatus("COL001", Status.INACTIVE);

    // Assert that the status is updated successfully
    assertEquals(Status.INACTIVE, store.getFileCollection("COL001").getStatus());
  }

  // Deleting a file collection from the in-memory map store.
  @Test
  public void test_deleteFileCollection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Delete the file collection
    store.deleteFileCollection("COL001");

    // Assert that the file collection is deleted successfully
    assertEquals(Status.DELETED, store.getFileCollection("COL001").getStatus());
  }

  // Deleting a file from all file collections in the in-memory map store.
  @Test
  public void test_deleteFile() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection1 = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection1);

    // Create another file collection
    FileCollection collection2 = new FileCollection(2, "COL002", "Collection 2",
        "Second collection", Status.ACTIVE);
    store.createFileCollection(collection2);

    // Add a file to both collections
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");
    store.addFileToCollection(file, "COL002");

    // Delete the file from all collections
    store.deleteFile("FILE001");

    // Assert that the file is deleted from all collections
    assertEquals(0, store.getNumberOfFilesInCollection("COL001"));
    assertEquals(0, store.getNumberOfFilesInCollection("COL002"));
  }

  // Deleting a file from a specific file collection in the in-memory map store.
  @Test
  public void test_deleteFileFromCollection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Add a file to the collection
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");

    // Delete the file from the collection
    store.deleteFile("FILE001", "COL001");

    // Assert that the file is deleted from the collection
    assertEquals(0, store.getNumberOfFilesInCollection("COL001"));
  }

  // Updating the status of a file in the in-memory map store.
  @Test
  public void test_updateFileStatus() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Add a file to the collection
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");

    // Update the status of the file
    store.updateFileStatus("FILE001", Status.INACTIVE);

    // Assert that the file status is updated
    assertEquals(Status.INACTIVE, store.getFile("FILE001").getStatus());
  }

  // Retrieving all files in a file collection from the in-memory map store.
  @Test
  public void test_getFilesByCollection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Add files to the collection
    File file1 = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    File file2 = new File(2, "FILE002", "File 2", "Second file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file1, "COL001");
    store.addFileToCollection(file2, "COL001");

    // Retrieve all files in the collection
    List<File> files = store.getFilesByCollection("COL001");

    // Assert that all files are retrieved
    assertEquals(2, files.size());
    assertTrue(files.contains(file1));
    assertTrue(files.contains(file2));
  }

  // Retrieving a file collection from the in-memory map store.
  @Test
  public void test_retrieve_file_collection() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create a new file collection
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);

    // Retrieve the file collection
    FileCollection retrievedCollection = store.getFileCollection("COL001");

    // Assert that the retrieved file collection is the same as the original file collection
    assertEquals(collection, retrievedCollection);
  }

  // Retrieving a file from the in-memory map store.
  @Test
  public void test_retrieve_file() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();
    FileCollection fileCollection = new FileCollection(1, "COL001", "Collection 1",
        "First collection",
        Status.ACTIVE);
    store.createFileCollection(fileCollection);
    // Create a new file
    File file = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file, "COL001");

    // Retrieve the file
    File retrievedFile = store.getFile("FILE001");

    // Assert that the retrieved file is the same as the original file
    assertEquals(file, retrievedFile);
  }

  // Retrieving all file collections that contain a specific file from the in-memory map store.
  @Test
  public void test_retrieve_file_collections_by_file() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();

    // Create file collections
    FileCollection collection1 = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    FileCollection collection2 = new FileCollection(2, "COL002", "Collection 2",
        "Second collection", Status.ACTIVE);
    store.createFileCollection(collection1);
    store.createFileCollection(collection2);

    // Add files to collections
    File file1 = new File(1, "FILE001", "File 1", "First file", new byte[0], Status.ACTIVE);
    File file2 = new File(2, "FILE002", "File 2", "Second file", new byte[0], Status.ACTIVE);
    store.addFileToCollection(file1, "COL001");
    store.addFileToCollection(file2, "COL002");

    // Retrieve file collections by file
    List<FileCollection> retrievedCollections = store.getFileCollectionByFile("FILE001");

    // Assert that the retrieved collections contain the expected file
    assertTrue(retrievedCollections.contains(collection1));
    assertFalse(retrievedCollections.contains(collection2));
  }


  // Creating a new file collection and adding it to the in-memory map store.
  @Test
  public void test_createFileCollectionAndAddToMapStore() {
    FileCollectionInMemoryMapStore store = new FileCollectionInMemoryMapStore();
    FileCollection collection = new FileCollection(1, "COL001", "Collection 1", "First collection",
        Status.ACTIVE);
    store.createFileCollection(collection);
    assertNotNull(store.getFileCollection("COL001"));
  }
}